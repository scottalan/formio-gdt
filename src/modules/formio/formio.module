<?php

/**
 * @file
 */

require_once 'includes/formio.inc';
include_once 'formio.block.inc';

/**
 * Implements hook_ctools_plugin_api().
 *
 * Tell CTools that we support the formio API.
 */
function formio_ctools_plugin_api($owner, $api) {
  if ($owner == 'formio' && $api == 'formio') {
    return array(
      'version' => 1,
      'path' => drupal_get_path('module', 'formio') . '/includes',
      );
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function formio_ctools_plugin_directory($owner, $plugin) {
  if ($owner == 'formio' && in_array($plugin, array_keys(formio_ctools_plugin_type()))) {
    return 'plugins/' . $plugin;
  }
  if ($owner == 'ctools' && $plugin == 'content_types') {
    return 'plugins/' . $plugin;
  }
  if ($owner == 'ctools' && $plugin =='export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function formio_ctools_plugin_type() {
  ctools_include('utility');
  $items = array();
  ctools_passthrough('formio', 'plugin-type', $items);
  return $items;
}

/**
 * Implements hook_library().
 */
function formio_library() {
  // Seamless library.
  $libraries['seamless'] = array(
    'title' => 'Seamless',
    'website' => 'https://github.com/travist/seamless.js',
    'version' => '1.0',
    'js' => array(
      'https://npmcdn.com/seamless@latest' => array(
        'type' => 'external',
        'group' => JS_THEME,
        'weight' => -1,
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function formio_menu() {
  ctools_include('utility');
  $items = array();
  ctools_passthrough('formio', 'menu', $items);

  $items['system/formio_ajax'] = array(
    'title' => 'Ajax callback',
    'page callback' => 'formio_ajax_form_callback',
    'delivery callback' => 'ajax_deliver',
    'access callback' => TRUE,
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
    'file path' => 'includes',
    'file' => 'form.inc',
  );
  $items['formio/autocomplete'] = array(
    'page callback' => 'formio_ajax_autocomplete',
    'access arguments' => array('administer formio'),
    'type' => MENU_CALLBACK,
  );

  // Admin menus.
  ctools_include('formio.admin', 'formio', NULL);
  formio_admin_menu_hook($items);

  return $items;
}

function formio_get_preset_by_pid($pid) {
  $preset = db_select('formio_preset', 'p')
    ->fields('p')
    ->condition('p.pid', $pid)
    ->execute()
    ->fetchAssoc();

  return $preset;
}

/**
 * Implements hook_action_info().
 */
function formio_action_info() {
  $items = array();
  ctools_include('utility');
  ctools_passthrough('formio', 'action-ui', $items);
  return $items;
}

function formio_preprocess_formio_form(&$vars) {
  $form = &$vars['form'];
  $vars['_id'] = $form['id'];
  $vars['pid'] = $form['pid'];
  $vars['name'] = $form['name'];
  $project = parse_url(trim(variable_get('formio_project_url', NULL)));
  list($vars['project_hash']) = explode('.', $project['host']);
  $vars['module_path'] = drupal_get_path('module', 'formio');
  $vars['bootswatch_theme'] = ($form['use_theme']) ? '&theme=' . $form['theme'] : '';
}



/**
 * Use our own ajax callback for forms.
 *
 * We use this instead of what 'system/ajax' returns. This is just a modified
 * version of it. This allows adding an ajax callback in a class method.
 *
 * @see ajax_form_callback().
 *
 * @return array|mixed
 */
function formio_ajax_form_callback() {
  $result = '';
  list($form, $form_state, $form_id, $form_build_id, $commands) = ajax_get_form();
//  ctools_include('content');
  drupal_process_form($form['#form_id'], $form, $form_state);

  if (!empty($form_state['triggering_element'])) {
    $callback = $form_state['triggering_element']['#ajax']['callback'];
  }
  if (isset($callback) && is_array($callback)) {
    $object = array_shift($callback);
    $function = array_shift($callback);

    if (method_exists($object, $function)) {
      $class = get_class($object);
      $result = call_user_func(array($class, $function), $form, $form_state);
    }

  }
  else {
    if (!empty($callback) && function_exists($callback)) {
      $result = $callback($form, $form_state);
    }
  }

  if (!(is_array($result) && isset($result['#type']) && $result['#type'] == 'ajax')) {
    // Turn the response into a #type=ajax array if it isn't one already.
    $result = array(
      '#type' => 'ajax',
      '#commands' => ajax_prepare_response($result),
    );
  }

  $result['#commands'] = array_merge($commands, $result['#commands']);

  return $result;
}

/**
 * Implements hook_trigger_info().
 */
function formio_trigger_info() {
  return array(
    'formio' => array(
      'formio_form_submission' => array(
        'label' => t('Form submission'),
      ),
    ),
  );
}











/**
 * Custom menu callback for an ajax auto-completion field.
 * @param string $string
 */
function formio_ajax_autocomplete($string = '') {
  $args = func_get_args();
  if (!empty($args)) {
    module_invoke_all('io_ajax_autocomplete_' . 'some_arg');
  }
  else {
    if ($string) {
      $result = db_select('formio_preset', 'fp')
        ->fields('fp', array('id', 'title'))
        ->condition('title', db_like($string) . '%', 'LIKE')
        ->range(0, 25)
        ->execute();
      foreach ($result as $formio) {
        $matches[$formio->title . "[id:  . $formio->id]"] = check_plain($formio->title);
      }
    }
    drupal_json_output($matches);
  }
}

/**
 * Implements hook_forms().
 */
function formio_forms($form_id, $args) {
  $forms = array();
  if (strncmp($form_id, 'formio_form_', 12) === 0) {
    $forms[$form_id] = array(
      'callback' => 'formio_form_render',
      'callback arguments' => array('args' => array($form_id, $args)),
    );
  }
  else {

  }
  return $forms;
}

function formio_form_render($form, &$form_state, $args) {
  $form_id = array_shift($args);
  $args = array_shift($args);

  if (isset($form_id)) {
    $function = $form_id . '_form';
    if (function_exists($function)) {
      $function($form, $form_state, $args);
    }
  }
  return $form;
}

/**
 * Form constructor for Calculations demo.
 */
function formio_calculation($form, $form_state) {
  // Load all plugins type "operation".
  ctools_include('plugins');
  $operations = ctools_get_plugins('example', 'operation');
  $operation_options = array();

  foreach ($operations as $id => $operation) {
    $operation_options[$id] = $operation['label'];
  }

  if (empty($operation_options)) {
    $form['message'] = array(
      '#markup' => t('Sorry no operation plugins available in the system.'),
    );
    return $form;
  }

  $form['operations'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Please choose Operations'),
    '#options' => $operation_options,
  );

  // Form elements...

  return $form;
}
