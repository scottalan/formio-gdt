<?php

/**
 * @file
 */

require_once 'includes/formio.inc';
include_once 'formio.block.inc';

define('FORMIO_BLOCK','formio_block');
define('BOOTSWATCH_API', '3');
define('FORMIO_API_MAJOR', 1);
define('FORMIO_API_MINOR', 0);

/**
 * Implements hook_ctools_plugin_api().
 *
 * Tell CTools that we support the formio API.
 */
function formio_ctools_plugin_api($owner, $api) {
  if ($owner == 'formio' && $api == 'formio') {
    return array(
      'version' => 1,
      'path' => drupal_get_path('module', 'formio') . '/includes',
      );
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function formio_ctools_plugin_directory($owner, $plugin) {
  if ($owner == 'formio' && in_array($plugin, array_keys(formio_ctools_plugin_type()))) {
    return 'plugins/' . $plugin;
  }
  if ($owner == 'ctools' && $plugin == 'content_types') {
    return 'plugins/' . $plugin;
  }
  if ($owner == 'ctools' && $plugin =='export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function formio_ctools_plugin_type() {
  // Loads custom plugin types.
  ctools_include('utility');
  $items = array();
  ctools_passthrough('formio', 'plugin-type', $items);
  return $items;
}

/**
 * Implements hook_library().
 */
function formio_library() {
  // Seamless library.
  $libraries['seamless'] = array(
    'title' => 'Seamless',
    'website' => 'https://github.com/travist/seamless.js',
    'version' => '1.0',
    'js' => array(
      'https://npmcdn.com/seamless@latest' => array(
        'type' => 'external',
        'group' => JS_THEME,
        'weight' => -1,
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function formio_menu() {
  // Allows plugins to define menu items via hook_menu().
  ctools_include('utility');
  $items = array();
  ctools_passthrough('formio', 'menu', $items);

  $items['system/formio_ajax'] = array(
    'title' => 'Ajax callback',
    'page callback' => 'formio_ajax_form_callback',
    'delivery callback' => 'ajax_deliver',
    'access callback' => TRUE,
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
    'file path' => 'includes',
    'file' => 'form.inc',
  );
  $items['formio/autocomplete'] = array(
    'page callback' => 'formio_ajax_autocomplete',
    'access arguments' => array('administer formio'),
    'type' => MENU_CALLBACK,
  );

  // Admin menus.
  ctools_include('formio.admin', 'formio', NULL);
  formio_admin_menu_hook($items);

  return $items;
}

/*
 * Define the formio entity and formio form entity.
 */
function formio_entity_info() {
  $return = array(
    'formio' => array(
      'label' => t('Formio Submission'),
      'plural label' => t('Formio Submissions'),
      'label callback' => 'formio_entity_label_callback',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'formio',
      'fieldable' => TRUE,
//      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'sid',
        'bundle' => 'form',
      ),
      'bundle keys' => array(
        'bundle' => 'machine_name',
      ),
      'bundles' => array(),
      'module' => 'formio',
    ),
    'formio_form' => array(
      'label' => t('Formio Form'),
      'plural label' => t('Formio Forms'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'formio_form',
      'fieldable' => FALSE,
      'module' => 'formio',
    )
  );

  $types = db_select('formio_form', 'ff')
    ->fields('ff')
    ->execute()
    ->fetchAllAssoc('machine_name');

  foreach ($types as $machine_name => $type) {
    $return['formio']['bundles'][$machine_name] = array(
      'label' => $type->name,
      'admin' => array(
        'path' => 'admin/structure/formio_form/manage',
        'access arguments' => array('administer formio forms'),
      ),
    );
  }

  return $return;
}

/**
 * The label callback for a formio entity.
 *
 * @param object $entity
 * @param string $entity_type
 * @return string
 */
function formio_entity_label_callback($entity, $entity_type) {
  // @todo: Really implement this.
  $info = $entity->entityInfo();
  $bundle = $info['entity keys']['bundle'];
  $label = $info['bundles'][$bundle]['label'];
  return $label;
}

/**
 * Helper to get a preset by preset id.
 *
 * @param int $pid
 *   The unique pid of a preset.
 *
 * @return array
 *   The preset.
 */
function formio_get_export_by_fid($fid) {
  $form = db_select('formio_form', 'f')
    ->fields('f')
    ->condition('f.fid', $fid)
    ->execute()
    ->fetchAssoc();

  return $form;
}

/**
 * Implements hook_block_view_alter().
 *
 * In formio_block_view() we use the delta to load the exported form. Then it's
 * passed to formio_render() to be fully rendered. We hook in here since we
 * know that the '$array' will actually be a string. Since it is, block moves
 * on and checks to see if $block->content is set. If it happens to be a string
 * then it just sets the content as: array('#markup' => $block->content).
 */
function formio_block_view_alter(&$array, $block) {
  if (strpos($block->delta, 'formio:') !== FALSE) {
    if (is_string($array)) {
      $block->content = $array;
    }
  }
}

/**
 * Render a formio form.
 *
 * @param array $conf
 * @param bool $new
 */
function formio_render(array $conf) {
  // Render the form block.
//  $block = module_invoke('formio', 'block_view', 'formio:' . $form_state['values']['machine_name'], $conf);

  // Params needed for ctools. Building them out so we know what they are.
  $type = 'formio_form';
  $subtype = 'formio_form';
  $args = array();
  $keywords = $contexts = array();

  // We are rendering a form during creation.
//  if ($conf['is_new']) {
//    $conf['enable'] = 1;
//    $conf['theme'] = 'paper';
//  }

  ctools_include('content');
  $renderer = ctools_content_render($type, $subtype, $conf, $keywords, $args, $contexts, 'hello');

  // Render the html in the Formio fieldset. @todo: Fix this render
  return theme('formio_form', $renderer->content);
}

/**
 * Implements hook_preprocess_formio_form().
 */
function formio_preprocess_formio_form(&$vars) {
  $form = &$vars['form'];

  $token = $form['action'] === 'drupal' ? restful_csrf_session_token() : (array) Formio::apiKey();
  $vars['token'] = array_shift($token);

  // The form.io form _id and the name of the preset.
  $vars['formio_id'] = $form['formio_id'];
  $vars['formio_name'] = isset($form['formio_name']) ? $form['formio_name'] : 'new-preset';

  if ($form['action'] != 'drupal') {
    global $base_url;
    $callback = $base_url . '/formio/' . $vars['formio_name'];
  }
  else {
    $url = variable_get('restful_hook_menu_base_path', 'api') . '/v' . FORMIO_API_MAJOR . '.' . FORMIO_API_MINOR . '/' . $form['machine_name'];
    $callback = url($url, array('absolute' => TRUE));
  }

  // Set the callback.
  $vars['callback'] = $callback;

  // Get the project hash from the uri.
  $project = parse_url(trim(variable_get('formio_project_url', NULL)));
  list($vars['project_hash']) = explode('.', $project['host']);

  // Path to the formio module.
  $vars['module_path'] = drupal_get_path('module', 'formio');

  // The Bootswatch theme, if there is one.
  $vars['theme'] = isset($form['enable']) ? '&theme=' . $form['theme'] : '';
}

/**
 * This is the default configuration form used to configure the display of the
 * form whether it be in a pane or a block.
 *
 * @param array $form
 * @param array $conf
 */
function formio_display_config_form(&$form, $conf) {

  // Grab the preview form.
  formio_preview_ajax_form($form);

  // Build the form.
  $form['formio'] = array(
    '#title' => 'Form',
    '#type' => 'fieldset',
  );

  // Get all form exports.
  $exports = formio_get_all_exports();

  if (empty($exports)) {
    $form['formio']['machine_name'] = array(
      '#prefix' => '<div class="no-presets-found">',
      '#markup' => t('You need to add a preset first. !path', array('!path' => l(t('Here'), 'admin/structure/formio'))),
      '#suffix' => '</div>',
    );
    $form['buttons']['return']['#access'] = FALSE;
  }

  // This is coming from a preset request.
  if (is_array($conf)) {
    $options = array();
    // Build the options based on exports.
    foreach ($exports as $export) {
      $options[$export->name] = $export->title;
    }

    $form['formio']['machine_name'] = array(
      '#type' => 'select',
      '#title' => t('Form Export'),
      '#options' => $options,
      '#default_value' => isset($conf['machine_name']) ? $conf['machine_name'] : variable_get($conf . ':machine_name', ''),
    );

  }
  // This is a block making a request.
  else {
    // The machine_name of the form.
    list(, $machine_name) = explode(':', $conf);

    // Grab the export.
    $export = $exports[$machine_name];

    $form['formio']['machine_name'] = array('#type' => 'hidden', '#value' => $machine_name);
    $form['formio']['id'] = array('#type' => 'hidden', '#value' => $export->formio_id);
    $form['formio']['form_name'] = array('#type' => 'hidden', '#value' => $export->formio_name);
  }

  $form['formio']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use bootswatch'),
    '#default_value' => is_array($conf) ? $conf['enable'] : variable_get($conf . ':use_bootswatch', ''),
  );

  $form['formio']['theme'] = array(
    '#title' => t('Bootswatch Theme'),
    '#default_value' => is_array($conf) ? $conf['theme'] : variable_get($conf . ':bootswatch_theme', ''),
    '#states' => array(
      'invisible' => array(
        ':input[name="enable"]' => array('checked' => FALSE),
      ),
    ),
  );

  // Get possible Bootswatch themes from the Bootswatch api.
  $swatches = formio_bootswatch();
  // If we have trouble communicating with the api then just present the user
  // with a textfield so they can enter the name of the theme.
  if ($swatches == FALSE) {
    $form['formio']['theme']['#type'] = 'textfield';
  }
  // If we got a successful response from Bootswatch then populate a select
  // list with the options.
  else {
    $form['formio']['theme']['#type'] = 'select';
    $form['formio']['theme']['#options'] = $swatches;
  }
}

/**
 * Get Bootswatch theme options from their api.
 *
 * @return array|bool
 *   Array of theme names if the api is up.
 */
function formio_bootswatch() {
  $swatches = array();
  $request = drupal_http_request('https://bootswatch.com/api/' . BOOTSWATCH_API . '.json');
  if ($request->code == 200) {
    $bootswatch = drupal_json_decode($request->data);

    foreach ($bootswatch['themes'] as $theme) {
      $name = $theme['name'];
      $key = strtolower($name);
      $swatches[$key] = $name;
    }
    return $swatches;
  }
  return FALSE;
}

/**
 * Use our own ajax callback for forms.
 *
 * We use this instead of what 'system/ajax' returns. This is just a modified
 * version of it. This allows adding an ajax callback in a class method.
 *
 * @see ajax_form_callback().
 *
 * @return array|mixed
 */
function formio_ajax_form_callback() {
  $result = '';
  list($form, $form_state, $form_id, $form_build_id, $commands) = ajax_get_form();
  drupal_process_form($form['#form_id'], $form, $form_state);
  if (!empty($form_state['triggering_element'])) {
    $callback = $form_state['triggering_element']['#ajax']['callback'];
  }
  if (isset($callback) && is_array($callback)) {
    $object = array_shift($callback);
    $function = array_shift($callback);

    if (method_exists($object, $function)) {
      $class = get_class($object);
      $result = call_user_func(array($class, $function), $form, $form_state);
    }

  }
  else {
    if (!empty($callback) && function_exists($callback)) {
      $result = $callback($form, $form_state);
    }
  }

  if (!(is_array($result) && isset($result['#type']) && $result['#type'] == 'ajax')) {
    // Turn the response into a #type=ajax array if it isn't one already.
    $result = array(
      '#type' => 'ajax',
      '#commands' => ajax_prepare_response($result),
    );
  }

  $result['#commands'] = array_merge($commands, $result['#commands']);

  return $result;
}

/**
 * Get d  efined forms from the database.
 *
 * @return mixed
 */
function formio_load_drupal_forms() {
  $forms = db_select('formio_form', 'ff')
    ->fields('ff')
    ->condition('ff.action', 'drupal')
    ->execute()
    ->fetchAllAssoc('name');

  return $forms;
}

/**
 * Implements hook_resource_plugin_alter()
 */
function formio_resource_plugin_alter(&$definitions) {
  $forms = formio_load_drupal_forms();

  foreach($forms as $name => $form) {
    $drupal_name = $form->machine_name;
    $formio_name = $form->formio_name;
    $definitions[$drupal_name . ':1.0'] = array(
      'name' => $drupal_name . ':1.0',
      'resource' => $drupal_name,
      'label' => $name,
      'description' => 'Restful endpoints for ' . $name,
      'authenticationTypes' => TRUE,
      'authenticationOptional' => FALSE,
      'discoverable' => TRUE,
      'hookMenu' => TRUE,
      'dataProvider' => array(
        'entityType' => 'formio',
        'bundles' => array(
          $drupal_name,
        ),
      ),
      'majorVersion' => FORMIO_API_MAJOR,
      'minorVersion' => FORMIO_API_MINOR,
      'class' => formio_api_class(),
      'provider' => 'formio',
      'formatter' => 'formio',
    );
  }
}

function formio_preview_ajax_form(&$form) {
  // Placeholder for rendered formio forms.
  $form['formio_render'] = array(
    '#type' => 'fieldset',
    '#title' => t('Form Preview'),
  );
  $form['formio_render']['formio_display'] = array(
    '#markup' => '<div id="formio-form-render"></div>',
  );
}

/**
 * Ajax callback to render a preview of the form.
 *
 * Renders the Form IO form that is selected.
 *
 * @param array $form
 *   Form that triggered the callback.
 * @param array $form_state
 *   State of the form.
 * @param bool $is_new
 *   Lets us know if this is being called on a new export form.
 *
 * @return array
 *   Ajax commands.
 */
function formio_preview_ajax_callback($form, $form_state, $is_new = TRUE) {
  $commands = array();
  $conf = $form_state['values'];
  $conf['is_new'] = ($form['#form_id'] === 'block_admin_configure') ? FALSE : $is_new;
  $commands[] = ajax_command_html('#formio-form-render', formio_render($conf));

  // Return commands to the system to be executed.
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_form_alter().
 */
function formio_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === 'block_admin_configure' && strpos($form['delta']['#value'], 'formio:') !== FALSE) {

    // Add the ajax callback for the preview. We want to trigger a preview
    // when the checkbox is selected and also when the theme is changed.
    $form['settings']['formio']['enable']['#ajax'] = $form['settings']['formio']['theme']['#ajax'] = array(
      'callback' => 'formio_preview_ajax_callback',
      'wrapper' => 'formio-form-render',
      'path' => 'system/formio_ajax',
      'method' => 'replace',
    );
    $form['settings']['formio']['theme']['#attached'] = array(
      'library' => array(
        array('formio', 'seamless'),
      ),
      'js' => array(
        drupal_get_path('module', 'formio') . '/js/formio.js' => array(NULL, 'module'),
      ),
    );
  }
}

/**
 * Convert formio field name to drupal field name.
 */
function formio_formio_to_drupal($name) {
  return 'formio_' . strtolower(preg_replace('/([a-z])([A-Z])/', '$1_$2', $name));
}

/**
 * Helper to return the correct class based on the api.
 */
function formio_api_class() {
  return 'Drupal\formio\Plugin\resource\formio\forms\Forms__' . FORMIO_API_MAJOR . '_' . FORMIO_API_MINOR;
}

function formio_apikey() {
  return Formio::apiKey();
}
