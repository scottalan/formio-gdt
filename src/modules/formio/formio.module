<?php

/**
 * @file
 */

require_once 'includes/formio.inc';
include_once 'formio.block.inc';

define('FORMIO_PRESET','formio_preset');
define('FORMIO_BLOCK','formio_block');

/**
 * Implements hook_ctools_plugin_api().
 *
 * Tell CTools that we support the formio API.
 */
function formio_ctools_plugin_api($owner, $api) {
  if ($owner == 'formio' && $api == 'formio') {
    return array(
      'version' => 1,
      'path' => drupal_get_path('module', 'formio') . '/includes',
      );
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function formio_ctools_plugin_directory($owner, $plugin) {
  if ($owner == 'formio' && in_array($plugin, array_keys(formio_ctools_plugin_type()))) {
    return 'plugins/' . $plugin;
  }
  if ($owner == 'ctools' && $plugin == 'content_types') {
    return 'plugins/' . $plugin;
  }
  if ($owner == 'ctools' && $plugin =='export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function formio_ctools_plugin_type() {
  // Loads custom plugin types.
  ctools_include('utility');
  $items = array();
  ctools_passthrough('formio', 'plugin-type', $items);
  return $items;
}

/**
 * Implements hook_library().
 */
function formio_library() {
  // Seamless library.
  $libraries['seamless'] = array(
    'title' => 'Seamless',
    'website' => 'https://github.com/travist/seamless.js',
    'version' => '1.0',
    'js' => array(
      'https://npmcdn.com/seamless@latest' => array(
        'type' => 'external',
        'group' => JS_THEME,
        'weight' => -1,
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function formio_menu() {
  // Allows plugins to define menu items via hook_menu().
  ctools_include('utility');
  $items = array();
  ctools_passthrough('formio', 'menu', $items);

  $items['system/formio_ajax'] = array(
    'title' => 'Ajax callback',
    'page callback' => 'formio_ajax_form_callback',
    'delivery callback' => 'ajax_deliver',
    'access callback' => TRUE,
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
    'file path' => 'includes',
    'file' => 'form.inc',
  );
  $items['formio/autocomplete'] = array(
    'page callback' => 'formio_ajax_autocomplete',
    'access arguments' => array('administer formio'),
    'type' => MENU_CALLBACK,
  );

  // Admin menus.
  ctools_include('formio.admin', 'formio', NULL);
  formio_admin_menu_hook($items);

  return $items;
}

/**
 * Helper to get a preset by pid.
 *
 * @param int $pid
 *   The unique pid of a preset.
 *
 * @return array
 *   The preset.
 */
function formio_get_preset_by_pid($pid) {
  $preset = db_select(FORMIO_PRESET, 'p')
    ->fields('p')
    ->condition('p.pid', $pid)
    ->execute()
    ->fetchAssoc();

  return $preset;
}

function formio_preprocess_formio_form(&$vars) {
  global $base_url;
  $form = &$vars['form'];

  // The form.io form _id and the name of the preset.
  $vars['_id'] = $form['id'];
  $vars['name'] = isset($form['name']) ? $form['name'] : 'new-preset';

  if ($vars['name'] == 'new-preset') {
    $callback = '';
  }
  else {
    $callback = $base_url . '/formio/' . $vars['name'];
  }

  // Set the callback.
  $vars['callback'] = $callback;

  // Get the project hash from the uri.
  $project = parse_url(trim(variable_get('formio_project_url', NULL)));
  list($vars['project_hash']) = explode('.', $project['host']);

  // Path to the formio module.
  $vars['module_path'] = drupal_get_path('module', 'formio');

  // The Bootswatch theme, if there is one.
  $vars['bootswatch_theme'] = isset($form['formio_use_bootswatch']) ? '&theme=' . $form['formio_bootswatch_theme'] : '';
}

/**
 * This is the default configuration form used to configure the display of the
 * form whether it be in a pane or a block.
 *
 * @param array $form
 */
function formio_display_config_form(&$form, $conf) {
  $options = array();

  $delta = is_array($conf) ? FALSE : (is_string($conf) ? TRUE : '');

  // Get all presets.
  ctools_include('export');
  $exports = ctools_export_crud_load_all(FORMIO_PRESET, TRUE);

  // Build the options for the presets.
  foreach ($exports as $export) {
    $options[$export->name] = $export->title;
  }

  // Build the form.
  $form['formio'] = array(
    '#title' => 'Form.io Embed',
    '#type' => 'fieldset',
  );

  if (empty($options)) {
    $form['formio']['formio_preset_name'] = array(
      '#prefix' => '<div class="no-presets-found">',
      '#markup' => t('You need to add a preset first. !path', array('!path' => l(t('Here'), 'admin/structure/formio'))),
      '#suffix' => '</div>',
    );
    $form['buttons']['return']['#access'] = FALSE;
  }
  else {
    $form['formio']['formio_preset_name'] = array(
      '#type' => 'select',
      '#title' => t('Select the form.io preset'),
      '#options' => $options,
      '#default_value' => empty($delta) ? $conf['formio_preset_name'] : variable_get('formio_preset_name:' . $delta, ''),
    );

    $form['formio']['formio_use_bootswatch'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use bootswatch'),
      '#default_value' => empty($delta) ? $conf['formio_use_bootswatch'] : variable_get('formio_use_bootswatch:' . $delta, ''),
    );

    $form['formio']['formio_bootswatch_theme'] = array(
      '#title' => t('Bootswatch Theme'),
      '#default_value' => empty($delta) ? $conf['formio_bootswatch_theme'] : variable_get('formio_bootswatch_theme:' . $delta, ''),
      '#states' => array(
        'invisible' => array(
          ':input[name="formio_use_bootswatch"]' => array('checked' => FALSE),
        ),
      ),
    );
    // Get possible Bootswatch themes from the Bootswatch api.
    $swatches = formio_bootswatch();
    // If we have trouble communicating with the api then just present the user
    // with a textfield so they can enter the name of the theme.
    if ($swatches == FALSE) {
      $form['formio']['formio_bootswatch_theme']['#type'] = 'textfield';
    }
    // If we got a successful response from Bootswatch then populate a select
    // list with the options.
    else {
      $form['formio']['formio_bootswatch_theme']['#type'] = 'select';
      $form['formio']['formio_bootswatch_theme']['#options'] = $swatches;
    }
  }
}

/**
 * Get Bootswatch theme options from their api.
 *
 * @return array|bool
 *   Array of theme names if the api is up.
 */
function formio_bootswatch() {
  $swatches = array();
  $request = drupal_http_request('https://bootswatch.com/api/' . BOOTSWATCH_API . '.json');
  if ($request->code == 200) {
    $bootswatch = drupal_json_decode($request->data);

    foreach ($bootswatch['themes'] as $theme) {
      $name = $theme['name'];
      $key = strtolower($name);
      $swatches[$key] = $name;
    }
    return $swatches;
  }
  return FALSE;
}

/**
 * Use our own ajax callback for forms.
 *
 * We use this instead of what 'system/ajax' returns. This is just a modified
 * version of it. This allows adding an ajax callback in a class method.
 *
 * @see ajax_form_callback().
 *
 * @return array|mixed
 */
function formio_ajax_form_callback() {
  $result = '';
  list($form, $form_state, $form_id, $form_build_id, $commands) = ajax_get_form();
  drupal_process_form($form['#form_id'], $form, $form_state);
  if (!empty($form_state['triggering_element'])) {
    $callback = $form_state['triggering_element']['#ajax']['callback'];
  }
  if (isset($callback) && is_array($callback)) {
    $object = array_shift($callback);
    $function = array_shift($callback);

    if (method_exists($object, $function)) {
      $class = get_class($object);
      $result = call_user_func(array($class, $function), $form, $form_state);
    }

  }
  else {
    if (!empty($callback) && function_exists($callback)) {
      $result = $callback($form, $form_state);
    }
  }

  if (!(is_array($result) && isset($result['#type']) && $result['#type'] == 'ajax')) {
    // Turn the response into a #type=ajax array if it isn't one already.
    $result = array(
      '#type' => 'ajax',
      '#commands' => ajax_prepare_response($result),
    );
  }

  $result['#commands'] = array_merge($commands, $result['#commands']);

  return $result;
}
