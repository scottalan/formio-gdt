<?php

/**
 * @file
 */

require_once 'includes/formio.inc';
include_once 'formio.block.inc';

define('BOOTSWATCH_API', '3');
define('FORMIO_API_MAJOR', 1);
define('FORMIO_API_MINOR', 0);

/**
 * Implements hook_init()
 */
function formio_init() {
  // Override ctools Modal default settings.
//  $modal_style = array(
//    'CToolsModal' => array(
//      'modalSize' => array(
//        'type' => 'scale',
//        'width' => '.9',
//        'height' => '.9',
//        'addWidth' => 0,
//        'addHeight' => 0,
//        'contentRight' => 25,
//        'contentBottom' => 75,
//      ),
//      'modalOptions' => array(
//        'opacity' => '.55',
//        'background-color' => '#FFF',
//      ),
//      'animationSpeed' => 'fast',
//      'modalTheme' => 'CToolsModalDialog',
//      'throbberTheme' => 'CToolsModalThrobber',
//    ),
//  );
//  // Allow modules to alter the modal style.
//  drupal_alter('formio_modal_style', $modal_style);
//  // Add the modal style.
//  drupal_add_js($modal_style, 'setting');
//  // Add the preview mode.
//  drupal_add_js(array('formioPreview' => array(
//    'pane_add_preview_mode' => 'single',
//  )), 'setting');
}

/**
 * Implements hook_module_implements_alter()
 */
function formio_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['formio'];
    unset($implementations['formio']);
    $implementations['formio'] = $group;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 *
 * Tell CTools that we support the formio API.
 */
function formio_ctools_plugin_api($owner, $api) {
  if ($owner == 'formio' && $api == 'formio') {
    return array(
      'version' => 1,
      'path' => drupal_get_path('module', 'formio') . '/includes',
      );
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function formio_ctools_plugin_directory($owner, $plugin) {
  if ($owner == 'formio' && in_array($plugin, array_keys(formio_ctools_plugin_type()))) {
    return 'plugins/' . $plugin;
  }
  if ($owner == 'ctools' && $plugin == 'content_types') {
    return 'plugins/' . $plugin;
  }
  if ($owner == 'ctools' && $plugin =='export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function formio_ctools_plugin_type() {
  // Loads custom plugin types.
  ctools_include('utility');
  $items = array();
  ctools_passthrough('formio', 'plugin-type', $items);
  return $items;
}

/**
 * Implements hook_library().
 */
function formio_library() {
  // Seamless library.
  $libraries['seamless'] = array(
    'title' => 'Seamless',
    'website' => 'https://github.com/travist/seamless.js',
    'version' => '1.0',
    'js' => array(
      'https://npmcdn.com/seamless@latest' => array(
        'type' => 'external',
        'group' => JS_THEME,
        'weight' => -1,
      ),
      // @todo: Change this back!!!!!!!!
//      'https://cdn.rawgit.com/travist/seamless.js/master/build/seamless.parent.js' => array(
//        'type' => 'external',
//        'group' => JS_THEME,
////        'group' => JS_LIBRARY,
//        'weight' => -100,
//      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function formio_menu() {
  // Allows plugins to define menu items via hook_menu().
  ctools_include('utility');
  $items = array();
  ctools_passthrough('formio', 'menu', $items);

  $items['system/formio_ajax'] = array(
    'title' => 'Ajax callback',
    'page callback' => 'formio_ajax_form_callback',
    'delivery callback' => 'ajax_deliver',
    'access callback' => TRUE,
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
    'file path' => 'includes',
    'file' => 'form.inc',
  );
  $items['formio/autocomplete'] = array(
    'page callback' => 'formio_ajax_autocomplete',
    'access arguments' => array('administer formio'),
    'type' => MENU_CALLBACK,
  );

  // Admin menus.
  ctools_include('formio.admin', 'formio', NULL);
  formio_admin_menu_hook($items);

  return $items;
}

/**
 * Implements hook_theme().
 */
function formio_theme($existing, $type, $theme, $path) {
  $path .= '/theme';
  return array(
    'formio_preview' => array(
      'variables' => array(
        'title' => NULL,
        'add_link' => NULL,
        'preview' => NULL,
        'single' => TRUE,
      ),
      'path' => $path,
      'template' => 'formio-preview',
    ),
    'formio_preview_link' => array(
      'variables' => array(
        'preview_link' => NULL,
        'add_link' => NULL
      ),
    ),
  );
}

/*
 * Define the formio entity and formio form entity.
 */
function formio_entity_info() {
  $return = array(
    'formio' => array(
      'label' => t('Formio Submission'),
      'plural label' => t('Formio Submissions'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'formio',
      'fieldable' => TRUE,
//      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'sid',
        'bundle' => 'instance',
      ),
      'bundle keys' => array(
        'bundle' => 'machine_name',
      ),
      'bundles' => array(),
      'module' => 'formio',
    ),
    'formio_form' => array(
      'label' => t('Formio Form'),
      'plural label' => t('Formio Forms'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'formio_form',
      'fieldable' => FALSE,
      'module' => 'formio',
      'entity keys' => array(
        'id' => 'fid',
      ),
    )
  );

  $types = db_select('formio_form', 'ff')
    ->fields('ff')
    ->execute()
    ->fetchAllAssoc('machine_name');

  foreach ($types as $machine_name => $type) {
    $return['formio']['bundles'][$machine_name] = array(
      'label' => $type->name,
      'admin' => array(
        'path' => 'admin/structure/formio_form/manage',
        'access arguments' => array('administer formio forms'),
      ),
    );
  }

  return $return;
}

/**
 * The label callback for a formio entity.
 *
 * @param object $entity
 * @param string $entity_type
 * @return string
 */
function formio_entity_label_callback($entity, $entity_type) {
  // @todo: Really implement this.
  $info = $entity->entityInfo();
  $bundle = $info['entity keys']['bundle'];
  $label = $info['bundles'][$bundle]['label'];
  return $label;
}

/**
 * Helper to get a preset by preset id.
 *
 * @param int $pid
 *   The unique pid of a preset.
 *
 * @return array
 *   The preset.
 */
function formio_get_export_by_fid($fid) {
  $form = db_select('formio_form', 'f')
    ->fields('f')
    ->condition('f.fid', $fid)
    ->execute()
    ->fetchAssoc();

  return $form;
}

/**
 * Render a formio form.
 *
 * @param array $conf
 * @param bool $new
 */
function formio_render(array $conf) {
  // Render the form block.
//  $block = module_invoke('formio', 'block_view', 'formio:' . $form_state['values']['machine_name'], $conf);

  // Params needed for ctools. Building them out so we know what they are.
  $type = 'formio_form';
  $subtype = $conf['machine_name'];
  $args = array();
  $keywords = $contexts = array();

  ctools_include('content');
  $renderer = ctools_content_render($type, $subtype, $conf, $keywords, $args, $contexts, 'hello');

  // Called second on blocks.

  // Include the seamless library. THIS HAS TO BE HERE.
  drupal_add_library('formio', 'seamless');

  // Render the html in the Formio fieldset. @todo: Fix this render
  return theme('formio_form', $renderer->content);
}

/**
 * Implements hook_preprocess_formio_form().
 */
function formio_preprocess_formio_form(&$vars) {
  $form = &$vars['form'];

  (array) $form;
  // @todo: Find where we can just load the export here and minimize setting
  // duplicate values elsewhere.
  //
  // Load the export to ensure we get all the proper settings for the form.
  ctools_include('export');
  $export = ctools_export_crud_load('formio_form', $form['machine_name']);
  
  // The form.io form _id and the name of the preset.
  $vars['formio_id'] = $form['_id'];
  $vars['formio_name'] = isset($form['name']) ? $form['name'] : 'new-preset';

  $actions = $export->action_settings;

  if (!empty($actions)) {
    // Redirect on submission.
    if (isset($actions['redirect']) && !empty($actions['redirect'])) {
      $vars['redirect'] = $actions['redirect'];
    }
  }

  $token = restful_csrf_session_token();
  $token = array_shift($token);
  $url = variable_get('restful_hook_menu_base_path', 'api') . '/v' . FORMIO_API_MAJOR . '.' . FORMIO_API_MINOR . '/' . $form['machine_name'];
  // If a preset export is being created then we won't have a machine_name yet.
  $callback = isset($form['machine_name']) ? url($url, array('absolute' => TRUE)) : '';

  // Set the callback.
  $vars['callback'] = $callback;
  // Set the token.
  $vars['token'] = $token;

  // Get the project hash from the uri.
  $project = parse_url(trim(variable_get('formio_project_url', NULL)));
  list($vars['project_hash']) = explode('.', $project['host']);

  // Path to the formio module.
  $vars['module_path'] = drupal_get_path('module', 'formio');

  // The Bootswatch theme, if there is one.
  $vars['theme'] = isset($form['enable']) ? '&theme=' . $form['theme'] : '';
}

/**
 * This is the default configuration form used to configure the display of the
 * form whether it be in a pane or a block.
 *
 * @param array $form
 * @param array $conf
 */
function formio_display_config_form(&$form, $conf) {

  // Grab the preview form.
  formio_preview_ajax_form($form);

  // Build the form.
  $form['formio'] = array(
    '#title' => 'Form',
    '#type' => 'fieldset',
  );

  // Get all form exports.
  $exports = formio_get_all_exports();

  if (empty($exports)) {
    $form['formio']['machine_name'] = array(
      '#prefix' => '<div class="no-presets-found">',
      '#markup' => t('You need to add a preset first. !path', array('!path' => l(t('Here'), 'admin/structure/formio'))),
      '#suffix' => '</div>',
    );
    $form['buttons']['return']['#access'] = FALSE;
  }

  // This is coming from a preset request.
  if (is_array($conf)) {
    $options = array();
    $options['_none'] = t('Choose a form');
    // Build the options based on exports.
    foreach ($exports as $export) {
      $options[$export->machine_name] = $export->drupal_title;
    }

    $form['formio']['machine_name'] = array(
      '#type' => 'select',
      '#title' => t('Form Export'),
      '#options' => $options,
//      '#default_value' => isset($conf['machine_name']) ? $conf['machine_name'] : variable_get($conf . ':machine_name', ''),
      '#default_value' => isset($conf['machine_name']) ? $conf['machine_name'] : '',
      '#ajax' => array(
        'callback' => 'formio_ajax_update_preview',
        'wrapper' => 'formio-form-render',
        'path' => 'system/formio_ajax',
        'method' => 'replace',
      ),
      '#attached' => array(
        'library' => array(
          array('formio', 'seamless'),
        ),
        'js' => array(
          drupal_get_path('module', 'formio') . '/js/formio.js' => array(NULL, 'module'),
        ),
      ),
    );

  }
  // This is a block making a request.
  else {
    // Grab the export.
    $export = $exports[$conf];
    $form['formio']['machine_name'] = array('#type' => 'hidden', '#value' => $conf);
    $form['formio']['_id'] = array('#type' => 'hidden', '#value' => $export->_id);
    $form['formio']['name'] = array('#type' => 'hidden', '#value' => $export->name);
  }

  $form['formio']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use bootswatch'),
    '#default_value' => is_array($conf) ? $conf['enable'] : variable_get('formio:' . $conf . ':enable', ''),
  );

  $form['formio']['theme'] = array(
    '#title' => t('Bootswatch Theme'),
    '#default_value' => is_array($conf) ? $conf['theme'] : variable_get('formio:' . $conf . ':theme', ''),
    '#states' => array(
      'invisible' => array(
        ':input[name="enable"]' => array('checked' => FALSE),
      ),
    ),
  );

  $form['formio']['action_settings']['redirect'] = array(
    '#type' => 'value',
    '#value' => isset($export->action_settings['redirect']) ? $export->action_settings['redirect'] : '',
  );

  // Get possible Bootswatch themes from the Bootswatch api.
  $swatches = formio_bootswatch();
  // If we have trouble communicating with the api then just present the user
  // with a textfield so they can enter the name of the theme.
  if ($swatches == FALSE) {
    $form['formio']['theme']['#type'] = 'textfield';
  }
  // If we got a successful response from Bootswatch then populate a select
  // list with the options.
  else {
    $form['formio']['theme']['#type'] = 'select';
    $form['formio']['theme']['#options'] = $swatches;
  }
}

/**
 * Get Bootswatch theme options from their api.
 *
 * @return array|bool
 *   Array of theme names if the api is up.
 */
function formio_bootswatch() {
  $swatches = array();
  $request = drupal_http_request('https://bootswatch.com/api/' . BOOTSWATCH_API . '.json');
  if ($request->code == 200) {
    $bootswatch = drupal_json_decode($request->data);

    foreach ($bootswatch['themes'] as $theme) {
      $name = $theme['name'];
      $key = strtolower($name);
      $swatches[$key] = $name;
    }
    return $swatches;
  }
  return FALSE;
}

/**
 * Attaching headers to the render array.
 *
 * @return array
 *   An array of headers.
 */
function formio_add_headers() {
  $apiKey = formio_apikey();
  if (empty($apiKey)) {
    throw new Exception('You must have an api key to continue.');
  }
  return array(
    array('x-token', $apiKey),
    array('Accept', 'application/json'),
    array('Access-Control-Request-Method', 'POST, GET, OPTIONS'),
  );
}

/**
 * Use our own ajax callback for forms.
 *
 * We use this instead of what 'system/ajax' returns. This is just a modified
 * version of it. This allows adding an ajax callback in a class method.
 *
 * @see ajax_form_callback().
 *
 * @return array|mixed
 */
function formio_ajax_form_callback() {
//  $result = '';
  list($form, $form_state, $form_id, $form_build_id, $commands) = ajax_get_form();
  ctools_include('content');
  ctools_include('modal');

  if (isset($form_state['no_redirect']) && !isset($form_state['form_info'])) {
    $form_state += array(
      're_render' => FALSE,
      'no_redirect' => !empty($form_state['ajax']),
    );
    drupal_build_form($form_id, $form_state);
//    drupal_process_form($form_id, $form, $form_state);
//    $form = drupal_build_form($form_state['build_info']['form_id'], $form_state);
  }
  else {
    // These ensure the class files/form definations are included.
    $content_type = ctools_get_content_type($form_state['pane']->type);
    $subtype = ctools_content_get_subtype($content_type, $form_state['subtype_name']);

    $form = ctools_content_form($form_state['op'], $form_state['form_info'], $form_state, $form_state['plugin'], $form_state['subtype_name'], $form_state['conf'], $form_state['step']);
  }

  if (!empty($form_state['triggering_element'])) {
    $callback = $form_state['triggering_element']['#ajax']['callback'];
  }
//  if (isset($callback) && is_array($callback)) {
//    $object = array_shift($callback);
//    $function = array_shift($callback);
//
//    if (method_exists($object, $function)) {
//      $class = get_class($object);
//      $result = call_user_func(array($class, $function), $form, $form_state);
//    }
//
//  }
  if (!empty($callback) && function_exists($callback)) {
    return $callback($form, $form_state);
  }



//  drupal_process_form($form['#form_id'], $form, $form_state);
//  if (!empty($form_state['triggering_element'])) {
//    $callback = $form_state['triggering_element']['#ajax']['callback'];
//  }
//  if (isset($callback) && is_array($callback)) {
//    $object = array_shift($callback);
//    $function = array_shift($callback);
//
//    if (method_exists($object, $function)) {
//      $class = get_class($object);
//      $result = call_user_func(array($class, $function), $form, $form_state);
//    }
//
//  }
//  else {
//    if (!empty($callback) && function_exists($callback)) {
//      $result = $callback($form, $form_state);
//    }
//  }
//
//  if (!(is_array($result) && isset($result['#type']) && $result['#type'] == 'ajax')) {
//    // Turn the response into a #type=ajax array if it isn't one already.
//    $result = array(
//      '#type' => 'ajax',
//      '#commands' => ajax_prepare_response($result),
//    );
//  }
//
//  $result['#commands'] = array_merge($commands, $result['#commands']);
//
//  return $result;
}

/**
 * Ajax callback to render a preview of the form.
 *
 * Renders the Form IO form that is selected.
 *
 * @param array $form
 *   Form that triggered the callback.
 * @param array $form_state
 *   State of the form.
 * @param bool $is_new
 *   Lets us know if this is being called on a new export form.
 *
 * @return array
 *   Ajax commands.
 */
//function formio_ajax_update_preview($form, $form_state, $is_new = TRUE) {
//  $commands = array();
//  $conf = $form_state['values'];
//  $conf['is_new'] = ($form['#form_id'] === 'block_admin_configure') ? FALSE : $is_new;
//  $commands[] = ajax_command_html('#formio-form-render', formio_render($conf));
//
//  // Return commands to the system to be executed.
//  return array('#type' => 'ajax', '#commands' => $commands);
//}

/**
 * Ajax callback that just returns the rendered preview.
 */
function formio_ajax_update_preview($form, $form_state, $is_new = TRUE) {
  if ($form['#form_id'] === 'block_admin_configure') {
    $commands = array();
    $conf = $form_state['values'];
    if (!isset($conf)) {
      list(, $machine_name) = explode(':', $form['delta']['#value']);
      $conf['machine_name'] = $machine_name;
    }
    $conf['is_new'] = ($form['#form_id'] === 'block_admin_configure') ? FALSE : $is_new;
    $commands[] = ajax_command_html('#formio-form-render', formio_render($conf));

  // Return commands to the system to be executed.
  return array('#type' => 'ajax', '#commands' => $commands);
  }
  else {
    if (isset($form_state['values']) && isset($form['#formio_preview_info']['configuration'])) {
      $form['#formio_preview_info']['configuration'] = $form_state['values'] + $form['#formio_preview_info']['configuration'];
    }
    return formio_form_post_render_preview('', $form);
  }
}

/**
 * Helper function to display the pane for showing previews in the add_content modal
 */
function _formio_render_preview_pane(&$plugin, $renderer) {
  $pane = panels_new_pane($plugin['type_name'], $plugin['subtype_name'], TRUE);
  $display = $renderer->display;
  $context = $renderer->display->context;
  $args = $renderer->display->args;
  $incoming_content = $renderer->display->incoming_content;
  $keywords = (!empty($renderer->display->keywords)) ? $renderer->display->keywords : array();
  if ($content = ctools_content_render($pane->type, $pane->subtype, $pane->configuration, $keywords, $args, $context, $incoming_content)) {
    $plugin['preview'] = theme('panels_pane', array('content' => $content, 'pane' => $pane, 'display' => $display));
//    $plugin['preview'] = theme('formio_form', array('content' => $content->content, 'pane' => $pane, 'display' => $display));
    drupal_add_library('formio', 'seamless');
    // Add preview information.
    drupal_add_js(array('formioPreview' => array(
      'pane_add_preview_type' => $pane->type,
      'pane_add_preview_subtype' => $pane->subtype,
    )), 'setting');
  }
}

/**
 * Add the preview to the form output.
 *
 * It is done here so the form is fully processed. All this does is generate
 * a preview of a Form.io form.
 */
function formio_form_post_render_preview($output, $form, $machine_name = NULL) {
  if (isset($_POST['ajax_html_ids'])) {
//    unset($_POST['ajax_html_ids']);
  }

  if (!isset($machine_name)) {
    if (isset($form['#formio_preview_info'])) {
      // Extract all the elements from the array.
      extract($form['#formio_preview_info']);
      $subtype = $pane->subtype;
    }
    else {
      $subtype = $form['info']['machine_name']['#value'];
    }
  }
  else {
    $subtype = $machine_name;
  }

  // We get $pane from the extraction above.
  $export = formio_get_export($subtype);
  // Make a call to get the Form.io form.
  $formio = formio_get_form($export->_id);
  // Build the form render array.
  $content = array(
    '#theme' => 'formio_form',
    '#form' => $export,
    '#attached' => array(
      'drupal_add_http_header' => formio_add_headers(),
    ),
  );

  if (!empty($content)) {
    $content = render($content);
  }
  else {
    $content = t('[no preview]');
  }

  $render = array(
    'title' => t('Preview'),
    'preview' => $content,
    'single' => TRUE,
    '#attached' => array(
      'drupal_add_http_header' => formio_add_headers(),
    ),
  );
  // Render the preview.
  return theme('formio_preview', $render) . $output;
}

/**
 * Preprocess the panels_add_content_modal() function to add the HTML for the preview
 */
function formio_preprocess_panels_add_content_modal(&$vars) {
  // Generate the pane preview
  $category = 'form-io';
  if ($vars['category'] === $category && !empty($vars['categories'][$category])) {

    if (!empty($vars['categories'][$category]['content'])) {
//      foreach ($vars['categories'][$category]['content'] as $title => $plugin) {
//        _formio_render_preview_pane($plugin, $vars['renderer']);
//        $vars['column_count'] = 1;
//        $vars['preview_single'] = isset($plugin['preview']) ? $plugin['preview'] : '';
//        $vars['preview_single_title'] = $vars['categories'][$category]['title'];
//
//        // Convert the link to generate a preview of itself.
//        $options = array(
//          'query' => array(
//            'type_name' => $plugin['type_name'],
//            'subtype_name' => $plugin['subtype_name'],
//          ),
//          'attributes' => array('class' => array('use-ajax button')),
//          'html' => TRUE,
//        );
//        $plugin['title'] = l(filter_xss_admin($plugin['title']), current_path(), $options);
//      }
    }

//    $query = drupal_get_query_parameters();
//    $preview_panes = (!empty($query['preview_panes'])) ? explode(',', $query['preview_panes']) : array();

    // Process each widget option, either adding the preview itself or a link to generate it.
//    foreach ($vars['categories'][$vars['category']]['content'] as $key => &$plugin) {
//      $query = drupal_get_query_parameters();
//      $preview_panes = (!empty($query['preview_panes'])) ? explode(',', $query['preview_panes']) : array();
//
//
//      // Convert the link to generate a preview of itself.
//      $options = array(
//        'query' => array(
//          'type_name' => $plugin['type_name'],
//          'subtype_name' => $plugin['subtype_name'],
//        ),
//        'attributes' => array('class' => array('use-ajax button')),
//        'html' => TRUE,
//      );
//      $plugin['title'] = l(filter_xss_admin($plugin['title']), current_path(), $options);
//    }
  }
}

/**
 * Helper function to render the Panels add content link.
 */
function _formio_render_add_content_link($vars, $content_type, $title) {
  $content_type['title'] = t('Add');
  // @todo: Investigate why view_panes are missing description.
  if (empty($content_type['description'])) {
    $content_type['description'] = $title;
  }

  return theme('panels_add_content_link', array(
    'renderer' => $vars['renderer'],
    'region' => $vars['region'],
    'content_type' => $content_type,
  ));
}

/**
 * Implements hook_block_view_alter().
 *
 * In formio_block_view() we use the delta to load the exported form. Then it's
 * passed to formio_render() to be fully rendered. We hook in here since we
 * know that the '$array' will actually be a string. Since it is, block moves
 * on and checks to see if $block->content is set. If it happens to be a string
 * then it just sets the content as: array('#markup' => $block->content).
 */
function formio_block_view_alter(&$array, $block) {
  if (strpos($block->delta, 'formio:') !== FALSE) {
//    $block->subject = '';
//    $block->content = $array['content'];
    if (is_string($array)) {
//      $block->content = $array;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function formio_form_alter(&$form, &$form_state, $form_id) {
  // This will add the ajax and attached elements to the form on the block
  // configuration page.
  if ($form_id === 'ctools_export_ui_edit_item_form' || ($form_id === 'block_admin_configure' && strpos($form['delta']['#value'], 'formio:') !== FALSE)) {
    drupal_add_library('formio', 'seamless');

//    drupal_add_library('formio', 'seamless');
    // Add a button to render the preview since it won't render on page load.
    $form['buttons']['preview'] = array(
      '#type' => 'button',
      '#value' => 'Preview',
      '#weight' => -10,
      '#ajax' => array(
        'callback' => 'formio_ajax_update_preview',
        'wrapper' => 'formio-form-render',
        'path' => 'system/formio_ajax',
        'method' => 'replace',
      ),
    );

    // Seems to be the best way to add #ajax to the block configure form.
    // Add the ajax callback for the preview. We want to trigger a preview
    // when the checkbox is selected and also when the theme is changed.
//    $form['settings']['formio']['enable']['#ajax'] = $form['settings']['formio']['theme']['#ajax'] = array(
//      'callback' => 'formio_ajax_update_preview',
//      'wrapper' => 'formio-form-render',
//      'path' => 'system/formio_ajax',
//      'method' => 'replace',
//    );
//    $form['settings']['formio']['theme']['#attached'] = array(
//      'library' => array(
//        array('formio', 'seamless'),
//      ),
//      'js' => array(
//        drupal_get_path('module', 'formio') . '/js/formio.js' => array(NULL, 'module'),
//      ),
//    );
//    _formio_attach_js($form);
  }
  if ($form_id === 'panels_panel_context_edit_content') {
    // Just add the seamless library to the parent page.
    drupal_add_library('formio', 'seamless');
  }
  // Does the same for panels.
  if (strpos($form_id, '_content_type_edit_form')) {
    // Let ctools include the panels plugins and ctools content.inc.
    ctools_include('plugins', 'panels');
    ctools_include('content');

    // Get the Panels display and the current Pane (if there is one).
    $display = $form_state['display'];
    if ($form_id == 'panels_edit_style_settings_form') {
      if ($form_state['type'] == 'pane') {
        $pane = $display->content[$form_state['pid']];
      }
      else {
        // For region styles, we don't have a pane.
        $pane = NULL;
      }
    }
    else {
      $pane = $form_state['pane'];
    }

    if (!empty($pane->configuration)) {
      $configuration = ($form_state['rebuild'] && (strpos($form_id, 'content_type_edit_form'))) ? array_merge($pane->configuration, $form_state['input']) : $pane->configuration;
    }
    else {
      $configuration = $form_state['input'];
    }

    // Just pass empty arrays.
    $keywords = array();
    $args = array();

    if (!empty($form_state['contexts'])) {
      $context = $form_state['contexts'];
    }
    elseif (!empty($form_state['display']->context)) {
      $context = $form_state['display']->context;
    }
    else {
      $context = array();
    }

    // Only render preview for Panes and not Regions.
    if (isset($pane)) {
      // Get the pane style.
      $style = (isset($pane->style['style'])) ? panels_get_style($pane->style['style']) : NULL;
      // Creates preview outside of form itself to fix various bugs, like form
      // inside form and double rendering.
      $form['#post_render'][] = 'formio_form_post_render_preview';
      $form['#formio_preview_info'] = array(
        'preview_callback' => isset($preview_callback) ? $preview_callback : NULL,
        'pane' => $pane,
        'configuration' =>  $configuration,
        'keywords' => $keywords,
        'args' => $args,
        'context' => $context,
        'style' => $style,
        'display' => $display,
      );

      // Remove the clearfix for preview floating
      if (isset($form['aligner_start'])) {
        $form['aligner_start']['#markup'] = str_replace('clearfix', '', $form['aligner_start']['#markup']);
      }

      $preview_attributes = array(
//        'style' => 'display: none',
        'class' => array(
          'formio-preview-button',
//          'ctools-auto-submit-click',
        ),
      );

      ctools_include('export');
      $export = ctools_export_crud_load($pane->type, $pane->subtype);

      $form['formio']['enable'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use bootswatch'),
        '#default_value' => isset($export->enable) ? $export->enable : 0,
      );

      $form['formio']['theme'] = array(
        '#title' => t('Bootswatch Theme'),
        '#default_value' => isset($export->theme) ? $export->theme : 'paper',
        '#states' => array(
          'invisible' => array(
            ':input[name="enable"]' => array('checked' => FALSE),
          ),
        ),
      );

      // Get possible Bootswatch themes from the Bootswatch api.
      $swatches = formio_bootswatch();
      // If we have trouble communicating with the api then just present the user
      // with a textfield so they can enter the name of the theme.
      if ($swatches == FALSE) {
        $form['formio']['theme']['#type'] = 'textfield';
      }
      // If we got a successful response from Bootswatch then populate a select
      // list with the options.
      else {
        $form['formio']['theme']['#type'] = 'select';
        $form['formio']['theme']['#options'] = $swatches;
      }

      // Create the preview refresh button
      $form['buttons']['preview'] = array(
        '#type' => 'button',
        '#value' => t('Update Preview'),
        '#attributes' => $preview_attributes,
        '#ajax' => array(
          'callback' => 'formio_ajax_update_preview',
          'wrapper' => 'formio-form-widget-preview',
          'path' => 'system/formio_ajax',
        ),
      );

      // Autosubmit the form
      ctools_add_js('auto-submit');
      $form['#attributes']['class'][] = 'ctools-auto-submit-full-form';
    }

//    $form['buttons']['cancel']['#access'] = FALSE;
    if (!empty($form['buttons']['return'])) {
      $form['buttons']['return']['#value'] = t('Save');
    }
    $form['buttons']['#weight'] = 100;

    // Attach javascript.
//    _formio_attach_js($form);
  }
}

/**
 * Implements template_preprocess_TEMPLATE().
 */
function template_preprocess_formio_preview(&$vars) {
  if (!empty($vars['single'])) {
    $vars['attributes_array']['id'] = 'formio-form-widget-preview';
    $vars['classes_array'][] = 'formio-preview-single';
  }
}

/**
 * Implements template_preprocess_TEMPLATE_link().
 */
function template_preprocess_formio_preview_link(&$vars) {
  $vars['classes_array'][] = 'formio-preview-link';
  $vars['classes_array'][] = 'clearfix';
}

/**
 * Returns HTML for a preview link.
 */
function theme_formio_preview_link($vars) {
  // When using a theme function and not a template, template_preprocess()
  // does not run so deal with 'classes_array' directly.
  $classes = implode(' ', $vars['classes_array']);

  $html = '';
  $html .= '<div class="' . $classes . '">';
  $html .= $vars['preview_link'];
  $html .= $vars['add_link'];
  $html .= '</div>';
  return $html;
}

/**
 * Process the panels_add_content_modal() to adjust the markup to present the preview
 */
function formio_process_panels_add_content_modal(&$vars) {

  $content = !empty($vars['categories'][$vars['category']]['content']) ? $vars['categories'][$vars['category']]['content'] : array();

  // If no category is selected or the category is empty or our special empty
  // category render a 'header' that will appear instead of the columns.
  if (empty($vars['category']) || empty($content) || $vars['category'] == 'root') {
    // Nothing to do since there is no preview
  }
  else if ($vars['category'] === 'form-io') {
//    $titles = array_keys($content);
//    natcasesort($titles);
//    $col_size = count($titles) / $vars['column_count'];
//
//    // Zero out the existing column data
//    $count = 0;
//    foreach ($titles as $title) {
//      $which = floor($count++ / $col_size) + 1;
//      $vars['columns'][$which] = '';
//    }
//
//    // Render the single preview.
//    $title = $vars['preview_single_title'];
//
//    $legend_title = !empty($title) ? $title : t('Select a widget to show its preview');
//    $add_content_link = !empty($title) ? _formio_render_add_content_link($vars, $content[$title], $title) : '';
//    $preview = !empty($vars['preview_single']) ? $vars['preview_single'] : t('No Preview');
//
//    $vars['columns'][0] = theme('formio_preview', array(
//      'title' => $legend_title,
//      'add_link' => $add_content_link,
//      'preview' => $preview,
//    ));
//
//    // Read the column data with our preview functionality
//    $count = 0;
//    foreach ($titles as $title) {
//      $which = floor($count++ / $col_size) + 1;
//
//      $legend_title = $content[$title]['title'];
//      $add_content_link = _formio_render_add_content_link($vars, $content[$title], $title);
//
//      $vars['columns'][$which] .= theme('formio_preview_link', array(
//        'preview_link' => $legend_title,
//        'add_link' => $add_content_link,
//      ));
//    }

//      if ($use_preview == PANOPOLY_ADD_PREVIEW_SINGLE) {
//        $vars['columns'][$which] .= theme('panopoly_magic_preview_link', array(
//          'preview_link' => $legend_title,
//          'add_link' => $add_content_link,
//        ));
//      }
//      else {
//        $preview = !empty($content[$title]['preview']) ? $content[$title]['preview'] : t('No Preview');
//        $vars['columns'][$which] .= theme('panopoly_magic_preview', array(
//          'title' => $legend_title,
//          'add_link' => $add_content_link,
//          'preview' => $preview,
//        ));
//      }
//    }
  }
}

/**
 * Attach the seamless library to forms using the preview.
 */
function _formio_attach_js(&$element) {
  if (!empty($element['#ajax'])
      && isset($element['#ajax']['callback'])
      && $element['#ajax']['callback'] == 'formio_ajax_update_preview') {
    // Add the seamless library and our js.
    $element['#attached']['library'][] = array('formio', 'seamless');
    $element['#attached']['js'][] = array(
      drupal_get_path('module', 'formio') . '/js/formio.js' => array(
        NULL,
        'module',
      )
    );
  }
  foreach (element_children($element) as $key) {
    _formio_attach_js($element[$key]);
  }
}

/**
 * Attach the seamless library to forms.
 */
function _formio_add_path_to_ajax($element) {
  if (!empty($element['#ajax']) && !isset($element['#ajax']['path'])) {
    $element['#ajax']['path'] = 'system/panopoly-magic';
  }
  foreach (element_children($element) as $key) {
    _formio_add_path_to_ajax($element[$key]);
  }
}

/**
 * Get d  efined forms from the database.
 *
 * @return mixed
 */
function formio_load_drupal_forms() {
  $forms = db_select('formio_form', 'ff')
    ->fields('ff')
    ->condition('ff.action', 'drupal')
    ->execute()
    ->fetchAllAssoc('drupal_title');

  return $forms;
}

/**
 * Implements hook_resource_plugin_alter()
 */
function formio_resource_plugin_alter(&$definitions) {
  $forms = formio_load_drupal_forms();

  foreach($forms as $title => $form) {
    $machine_name = $form->machine_name;
    $definitions[$machine_name . ':1.0'] = array(
      'name' => $machine_name . ':1.0',
      'resource' => $machine_name,
      'label' => $title,
      'description' => 'Restful endpoints for ' . $title,
      'authenticationTypes' => TRUE,
      'authenticationOptional' => FALSE,
      'discoverable' => TRUE,
      'hookMenu' => TRUE,
      'dataProvider' => array(
        'entityType' => 'formio',
        'bundles' => array(
          $machine_name,
        ),
      ),
      'majorVersion' => FORMIO_API_MAJOR,
      'minorVersion' => FORMIO_API_MINOR,
      'class' => formio_api_class(),
      'provider' => 'formio',
      'formatter' => 'formio',
    );
  }
}

function formio_preview_ajax_form(&$form) {
  // Placeholder for rendered formio forms.
  $form['formio_render'] = array(
    '#type' => 'fieldset',
    '#title' => t('Form Preview'),
  );
  $id = drupal_html_id('formio-form-render');
  $form['formio_render']['formio_display'] = array(
    '#markup' => '<div id="' . $id . '"></div>',
  );
}

/**
 * Determine whether a field has any data.
 *
 * This is basically field_has_data() with a slight modification.
 *
 * @param $field
 *   A field structure.
 * @param string $bundle
 *   The entity bundle.
 *
 * @return bool
 *   TRUE if the field, for a particular bundle, has data. FALSE otherwise.
 */
function formio_bundle_field_has_data($field, $bundle) {
  $query = new EntityFieldQuery();
  $query = $query->fieldCondition($field)
    ->entityCondition('bundle', $bundle)
    ->range(0, 1)
    ->count()
    // Neutralize the 'entity_field_access' query tag added by
    // field_sql_storage_field_storage_query(). The result cannot depend on the
    // access grants of the current user.
    ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');

  $result = $query->execute();
  return (bool) $result;
}

/**
 * Convert formio field name to drupal field name.
 */
function formio_formio_to_drupal($name) {
  return 'formio_' . strtolower(preg_replace('/([a-z])([A-Z])/', '$1_$2', $name));
}

/**
 * Helper to return the correct class based on the api.
 */
function formio_api_class() {
  return 'Drupal\formio\Plugin\resource\formio\forms\Forms__' . FORMIO_API_MAJOR . '_' . FORMIO_API_MINOR;
}

function formio_apikey() {
  return Formio::apiKey();
}

/**
 * Get a specific form.
 *
 * @param string $id
 *   The unique string that represents a Formio form.
 * @param bool $reset
 *   Choose not to use static cache.
 *
 * @return object
 *   The form object.
 */
function formio_get_form($_id, $reset = FALSE) {
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast = &drupal_static(__FUNCTION__);
  }
  $forms = &$drupal_static_fast;
  if (!$forms) {
    $forms = array();
  }

  if ($reset || !isset($forms[$_id])) {
    $formio = formio_rest('form/' . $_id);
  }

  return $formio->result;
}
