<?php

define('FORMIO_BLOB', 'data');

/**
 * Implements hook_ctools_plugin_api().
 *
 * Tell CTools that we support the formio API.
 */
function formio_ctools_plugin_api($owner, $api) {
  if ($owner == 'formio' && $api == 'formio') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function formio_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
  if ($owner == 'ctools' && $plugin_type =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_menu().
 */
function formio_menu() {
  $items = array();
  $items['system/formio_ajax'] = array(
    'title' => 'Ajax callback',
    'page callback' => 'formio_ajax_form_callback',
    'delivery callback' => 'ajax_deliver',
    'access callback' => TRUE,
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
    'file path' => 'includes',
    'file' => 'form.inc',
  );
  $items['formio/autocomplete'] = array(
    'page callback' => 'formio_ajax_autocomplete',
    'access arguments' => array('administer formio'),
    'type' => MENU_CALLBACK,
  );

  // Admin menus.
  ctools_include('formio.admin', 'formio');
  formio_admin_menu_hook($items);

  return $items;
}

function formio_preprocess_formio_form(&$vars) {
  $form = &$vars['form'];
  $vars['_id'] = $form['id'];
  $project = parse_url(trim(variable_get('formio_project_url', NULL)));
  list($vars['project_hash']) = explode('.', $project['host']);
  $vars['module_path'] = drupal_get_path('module', 'formio');
  $vars['bootswatch_theme'] = ($form['use_theme']) ? '&theme=' . $form['theme'] : '';
}

/**
 * Implements hook_block_info().
 */
function formio_block_info() {
  return array(
    'formio_form' => array(
      'info' => t('Form.io Form'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function formio_block_view($delta = '', $path) {
  ctools_include('content');
  $block = array();
  switch ($delta) {
    case 'formio_form':
      $args = array('path' => $path);
      $data = ctools_content_render('formio_form', 'formio_form', NULL, array(), $args, array());
      $content = theme('formio_form', $data->content);
      $block['subject'] = '';
      $block['content'] = array(
        '#markup' => $content,
      );
      break;
  }

  return $block;
}

/**
 * Use our own ajax callback for forms.
 *
 * We use this instead of what 'system/ajax' returns. This is just a modified
 * version of it.
 *
 * @see ajax_form_callback().
 *
 * @return array|mixed
 */
function formio_ajax_form_callback() {
  list($form, $form_state, $form_id, $form_build_id, $commands) = ajax_get_form();
  ctools_include('content');
  drupal_process_form($form['#form_id'], $form, $form_state);

  if (!empty($form_state['triggering_element'])) {
    $callback = $form_state['triggering_element']['#ajax']['callback'];
  }
  if (isset($callback) && is_array($callback)) {
    $object = array_shift($callback);
    $function = array_shift($callback);

    if (method_exists($object, $function)) {
      $class = get_class($object);
      $result = call_user_func(array($class, $function), $form, $form_state);
    }

  }
  else {
    if (!empty($callback) && function_exists($callback)) {
      $result = $callback($form, $form_state);
    }
  }

  if (!(is_array($result) && isset($result['#type']) && $result['#type'] == 'ajax')) {
    // Turn the response into a #type=ajax array if it isn't one already.
    $result = array(
      '#type' => 'ajax',
      '#commands' => ajax_prepare_response($result),
    );
  }

  $result['#commands'] = array_merge($commands, $result['#commands']);

  return $result;
}

function formio_ajax_autocomplete($string = '') {
  $args = func_get_args();
  if (!empty($args)) {
    module_invoke_all('io_ajax_autocomplete_' . 'some_arg');
  }
  else {
    if ($string) {
      $result = db_select('formio_preset', 'fp')
        ->fields('fp', array('_id', 'title'))
        ->condition('title', db_like($string) . '%', 'LIKE')
        ->range(0, 25)
        ->execute();
      foreach ($result as $formio) {
        $matches[$formio->title . "[id:  . $formio->_id]"] = check_plain($formio->title);
      }
    }
    drupal_json_output($matches);
  }
}

/**
 * Implements hook_forms().
 */
function formio_forms($form_id, $args) {
  $forms = array();
  if (strncmp($form_id, 'formio_form_', 12) === 0) {
    $forms[$form_id] = array(
      'callback' => 'formio_form_render',
      'callback arguments' => array('args' => array($form_id, $args)),
    );
  }
  else {

  }
  return $forms;
}

function formio_form_render($form, &$form_state, $args) {
  $form_id = array_shift($args);
  $args = array_shift($args);

  if (isset($form_id)) {
    $function = $form_id . '_form';
    if (function_exists($function)) {
      $function($form, $form_state, $args);
    }
  }
  return $form;
}
