<?php
/**
 * @file
 * 
 */

/**
 * Implements hook_menu().
 */
function formio_actions_menu() {
  $items = array();

  $items['form.io'] = array(
    'page callback' => 'formio_post_trigger',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 *
 * @param string $token
 *   A token used for authentication.
 * @param string $uri
 *   The PI
 * @param string $data
 * @return array
 */
function formio_curl_post($token, $uri, $data) {
  // Initialize the session.
  $curl = curl_init();

  // Setup options for the transfer.
  curl_setopt_array($curl, array(
    // Adding a query here for a 'Dry Run'.
    CURLOPT_URL => $uri, // . '?dryrun=1',
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_ENCODING => "",
    CURLOPT_MAXREDIRS => 10,
    CURLOPT_TIMEOUT => 30,
    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
    CURLOPT_CUSTOMREQUEST => "POST",
    CURLOPT_POSTFIELDS => "$data",
    CURLOPT_HTTPHEADER => array(
      "cache-control: no-cache",
      "content-type: application/json",
      "x-jwt-token: " . $token,
    ),
  ));

  // Execute the session.
  $response = curl_exec($curl);

  // The last error, if any, for the current session.
  $error = curl_error($curl);

  // The session result containing the response and any errors.
  $result = array(
    'response' => $response,
    'error' => $error,
  );

  // Close the session.
  curl_close($curl);

  return $result;
}

/**
 * Page callback used by the Custom Action URL.
 *
 * @todo: a wip, need to map data to entity fields and authenticate with token.
 */
function formio_post_trigger() {

  $data = file_get_contents('php://input');

  // This is used to validate the request. This will be posted back to form.io
  // and the result will need to be a 200. Add a ?dryrun=1 query to the post.
  $token = getallheaders()['X-Jwt-Token'];

  $args = func_get_args();

  // Get all enqueued actions.
  $aids = trigger_get_assigned_actions(__FUNCTION__);

  $actions_map = actions_actions_map($aids);

  ctools_include('export');

  // TODO: Probably shouldn't be loading all the presets.
  $exports = ctools_export_crud_load_all('formio_preset');

  // TODO: Do we need to iterate over each export or can we target just the
  // export we need.
  foreach ($exports as $export) {
    $action = $export->action;
    if (isset($actions_map[$action]) && !empty($actions_map[$action])) {
      $callback = $actions_map[$action]['callback'];
      $id = $export->id;


      $request = new FormioRequest();
      $request
        ->setOp()
        ->endpoint('form/' . $id)
        ->request()->fetchKeyed('path');

      // We should always have a path but in case we don't throw an error.
      $path = $request->forms['path'];
      if (!isset($path)) {
        // TODO: For now try a 404.
        drupal_deliver_page(MENU_NOT_FOUND, 'drupal_deliver_html_page');
      }
      $uri = $request->project . '/'. $path . '/submission';

      // Create the context argument.
      $context = array(
        'id' => $id,
        'token' => $token,
        'uri' => $uri,
        'data' => $data,
        'hook' => __FUNCTION__,
        'args' => $args,
      );
    }
    break;
  }
  $action_result = actions_do(array_keys($aids), $request, $context);
  drupal_exit();
}

/**
 * An implementation of a Drupal action callback triggered when posting a form.
 *
 * @param object $formio
 *   The formio form.
 * @param array $context
 *   Anything needed to perform the action. The context is build in the trigger.
 */
function formio_actions_post_action($formio, $context) {

  // Consider @see drupal_deliver_html_page().
  $result = formio_curl_post($context['token'], $context['uri'], $context['data']);

  // TODO: Will this work for multiple actions with the drupal_exit() being called from the trigger?
  if (empty($result['error'])) {
    drupal_json_output(json_encode($result['response']));
  }
}

/**
 * Implements hook_action_info().
 */
function formio_actions_action_info() {
  $items = array();
  formio_actions_actions('formio_actions', 'action', $items);
  return $items;
}

/**
 * Helper that includes new actions added to modules.
 *
 * @param string $module
 *   The name of the module.
 * @param string $type
 *   For now this is just using 'action' but could be extended if needed.
 * @param array $items
 *   An empty array passed in via hook_action_info() used to collect actions.
 *
 * @see ctools_passthrough().
 *
 * @return array
 */
function formio_actions_actions($module, $type, &$items) {
  $files = file_scan_directory(drupal_get_path('module', $module) . '/actions', '/\.' . $type . '\.inc$/', array('key' => 'name'));
  foreach ($files as $file) {
    require_once DRUPAL_ROOT . '/' . $file->uri;
    list($action) = explode('.', $file->name, 2);

    $function = $module . '_' . str_replace ('-', '_', $action) . '_' . str_replace('-', '_', $type) . '_info';
    if (function_exists($function)) {
      $function($items);
    }
  }
}

/**
 * Implements hook_trigger_info().
 */
function formio_actions_trigger_info() {
  return array(
    'formio' => array(
      'post_trigger' => array(
        'label' => t('A form is submitted to Form.io'),
      ),
      'formio_node_post' => array(
        'label' => t('Post the form to a Webform'),
      ),
    ),
  );
}
